Keepalived和Nginx服务器负载均衡的配置步骤


1.在两个后端服务器上安装和配置Nginx：
sudo yum install nginx
sudo systemctl enable nginx

2.配置Nginx：
编辑Nginx配置文件 /etc/nginx/nginx.conf，确保以下内容存在：

http {
    upstream backend {
        server 192.168.199.100;  # 第一个后端服务器的IP地址
        server 192.168.199.101;  # 第二个后端服务器的IP地址
    }

    server {
        listen 80;
        location / {
            proxy_pass http://backend;
        }
    }
}

确保将 192.168.0.101 和 192.168.0.102 替换为实际的后端服务器IP地址。


3.在两个后端服务器上安装和配置Keepalived：

sudo yum install keepalived
sudo systemctl enable keepalived

4.配置Keepalived：
编辑Keepalived的主配置文件 /etc/keepalived/keepalived.conf，确保以下内容存在：

! Configuration File for keepalived

global_defs {
    router_id LVS_DEVEL
}

vrrp_script check_nginx {
    script "/etc/keepalived/check_nginx.sh"  # 检查Nginx是否运行的脚本路径
    interval 2                             # 检查间隔
    weight -20                             # 脚本返回非0时的权重
}

vrrp_instance VI_1 {
    state MASTER                           # 主节点
    interface eth0                         # 网络接口
    virtual_router_id 51                   # 虚拟路由ID
    priority 101                           # 优先级
    advert_int 1                           # 广告间隔
    authentication {
        auth_type PASS
        auth_pass 1111                       # 验证密码
    }
    virtual_ipaddress {
        192.168.0.100                         # 虚拟IP地址
    }
    track_script {
        check_nginx                          # 跟踪的脚本
    }
}


5.编写Nginx状态检查脚本：
创建脚本文件 /etc/keepalived/check_nginx.sh 并添加以下内容：

#!/bin/bash

nginx_process=$(ps aux | grep nginx | grep -v grep)

if [ -n "$nginx_process" ]; then
    exit 0
else
    exit 1
fi

6.启动服务：
sudo systemctl start nginx
sudo systemctl start keepalived


这只是一个简化版本的配置步骤，实际的配置可能因环境和需求而有所不同。
----------------------------------------------------------


user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

events {
  worker_connections 1024;
}

http {
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log /var/log/nginx/access.log main;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 4096;

  include  /etc/nginx/mime.types;
  default_type  application/octet-stream;
  
  include /etc/nginx/conf.d/*.conf;
}

stream {
   log_format tcp_proxy '$remote_addr [$time_local] '
                        '$protocol $status $bytes_sent $bytes_received '
                        '$session_time "$upstream_addr" '
                        '"$upstream_bytes_sent" "$upstream_bytes_received"
"$upstream_connect_time"';
   
   access_log /var/log/nginx/tcp-access.log tcp_proxy ;
   
   open_log_file_cache off;
   include /etc/nginx/conf.d/*.stream;

   upstream wab80 {
     server 192.168.12.70:8080 weight=5 max_fails=5 fail_timeout=30s;
     server 192.168.12.71:8080 weight=5 max_fails=5 fail_timeout=30s backup;
  }
  server {
     listen 80;#监听端口
     proxy_connect_timeout 3s;
     proxy_timeout 600s;
     proxy_pass wab80;
  }

  upstream wab443 {
     server 192.168.12.70:8080 weight=5 max_fails=5 fail_timeout=30s;
     server 192.168.12.71:8080 weight=5 max_fails=5 fail_timeout=30s backup;
  }
  server {
     listen 443;#监听端口
     proxy_connect_timeout 3s;
     proxy_timeout 600s;
     proxy_pass wab443;
  }

}

